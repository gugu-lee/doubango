name: Doubango Build with Rocky Linux

on:
  workflow_dispatch:
    inputs:
      android_abi:
        description: 'Android ABI (armeabi-v7a, arm64-v8a, x86, x86_64)'
        required: true
        default: 'arm64-v8a'
      ndk_version:
        description: 'Android NDK version (e.g., r25c)'
        required: true
        default: 'r25c'
      rocky_version:
        description: 'Rocky Linux version (8 or 9)'
        required: true
        default: '9'
      enable_debug:
        description: 'Enable debug symbols (true/false)'
        type: boolean
        default: true
      swig_version:
        description: 'SWIG version (e.g., 4.1.1)'
        required: false
        default: '4.1.1'

jobs:
  build-doubango:
    runs-on: ubuntu-latest
    container:
      image: rockylinux:${{ github.event.inputs.rocky_version }}
      options: --privileged
    
    env:
      ANDROID_SDK_ROOT: /opt/android-sdk
      ANDROID_NDK_HOME: /opt/android-ndk
      DOUBANGO_SOURCE: ${{ github.workspace }}  # 使用当前仓库代码
      DOUBANGO_OUTPUT: /output
      ANDROID_ABI: ${{ github.event.inputs.android_abi }}
      NDK_VERSION: ${{ github.event.inputs.ndk_version }}
      ROCKY_VERSION: ${{ github.event.inputs.rocky_version }}
      ENABLE_DEBUG: ${{ github.event.inputs.enable_debug }}
      SWIG_VERSION: ${{ github.event.inputs.swig_version }}
    
    steps:
    - name: Checkout current repository (forked)
      uses: actions/checkout@v4
      
    - name: Print build parameters
      run: |
        echo "### 编译参数"
        echo "Android ABI: $ANDROID_ABI"
        echo "NDK Version: $NDK_VERSION"
        echo "Rocky Linux Version: $ROCKY_VERSION"
        echo "Debug Symbols: $ENABLE_DEBUG"
        echo "SWIG Version: $SWIG_VERSION"
        echo "Container OS: $(cat /etc/os-release | grep PRETTY_NAME)"
        echo "###"
        echo "Doubango source at: $DOUBANGO_SOURCE"
      
    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y \
          autoconf \
          automake \
          libtool \
          pkgconfig \
          make \
          gcc-c++ \
          wget \
          unzip \
          tar \
          git \
          python3 \
          python3-devel \
          glibc-langpack-en \
          java-11-openjdk-devel \
          openssl-devel
        
        # 设置语言环境
        export LANG=en_US.UTF-8
        
        # 验证安装
        autoconf --version
        automake --version
        make --version
        g++ --version
      
    - name: Install PCRE2 development package
      run: |
        # 安装PCRE2开发包（SWIG依赖）
        dnf install -y pcre2-devel
        
        # 验证PCRE2安装
        pcre2-config --version
        echo "PCRE2 development package installed"
      
    - name: Install SWIG from source
      run: |
        # 安装编译SWIG的其他依赖
        dnf install -y byacc
        
        # 下载并编译SWIG
        SWIG_VERSION="$SWIG_VERSION"
        wget https://github.com/swig/swig/archive/refs/tags/v${SWIG_VERSION}.tar.gz
        tar xzf v${SWIG_VERSION}.tar.gz
        cd swig-${SWIG_VERSION}
        
        # 配置和编译
        ./autogen.sh
        ./configure --prefix=/usr/local
        make -j$(nproc)
        make install
        
        # 验证安装
        swig -version | head -n 1
        echo "SWIG installed at $(which swig)"
      
    - name: Setup Android SDK
      run: |
        mkdir -p $ANDROID_SDK_ROOT
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
        mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
        
        # 接受许可协议
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        
        echo "Android SDK installed at $ANDROID_SDK_ROOT"
      
    - name: Install Android NDK
      run: |
        mkdir -p $ANDROID_NDK_HOME
        wget https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip -O ndk.zip
        unzip ndk.zip -d /tmp
        mv /tmp/android-ndk-${NDK_VERSION}/* $ANDROID_NDK_HOME
        rm ndk.zip
        
        # 验证NDK安装
        $ANDROID_NDK_HOME/ndk-build --version
        echo "NDK installed at $ANDROID_NDK_HOME"
        
        # 检查关键文件是否存在
        if [ -f "$ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh" ]; then
          echo "make-standalone-toolchain.sh found in NDK"
        else
          echo "ERROR: make-standalone-toolchain.sh not found in NDK!"
          echo "This file is required for Doubango builds. Please check NDK version."
          exit 1
        fi
      
    - name: Prepare NDK toolchains (Doubango compatibility fix)
      run: |
        cd $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
        ln -sf aarch64-linux-android21-clang++ aarch64-linux-android-clang++ || true
        ln -sf armv7a-linux-androideabi21-clang++ arm-linux-androideabi-clang++ || true
        echo "Created NDK toolchain symlinks"
      
    - name: Configure and build Doubango
      run: |
        cd $DOUBANGO_SOURCE
        
        # 导出 NDK 环境变量
        export NDK=$ANDROID_NDK_HOME
        echo "Exported NDK environment variable: $NDK"
        
        # 检查关键文件是否存在
        TOOLCHAIN_SCRIPT="$NDK/build/tools/make-standalone-toolchain.sh"
        echo "Checking for make-standalone-toolchain.sh at: $TOOLCHAIN_SCRIPT"
        
        if [ -f "$TOOLCHAIN_SCRIPT" ]; then
          echo "make-standalone-toolchain.sh found. Proceeding with build."
        else
          echo "ERROR: make-standalone-toolchain.sh not found in NDK!"
          echo "This file is required for Doubango builds. Please check NDK version."
          ls -lR $NDK/build/tools/ || true
          exit 1
        fi
        
        # 运行autogen脚本序列
        ./autogen.sh
        cd bindings
        ./autogen.sh
        cd ..
        
        # 执行Android构建脚本
        ./android_build.sh
        
        # 安装编译产物
        mkdir -p $DOUBANGO_OUTPUT
        cp -r bin/* $DOUBANGO_OUTPUT/
        
        # 验证编译结果
        find $DOUBANGO_OUTPUT -name "*.so" -o -name "*.a" | xargs -I {} ls -lh {}
        echo "Build completed successfully!"
      
    - name: Collect artifacts
      run: |
        mkdir -p /github/workspace/artifacts
        cp -r $DOUBANGO_OUTPUT/* /github/workspace/artifacts/
        
        # 创建版本信息文件
        echo "Doubango Build Report" > /github/workspace/artifacts/build-info.txt
        echo "Build Date: $(date)" >> /github/workspace/artifacts/build-info.txt
        echo "Android ABI: $ANDROID_ABI" >> /github/workspace/artifacts/build-info.txt
        echo "NDK Version: $NDK_VERSION" >> /github/workspace/artifacts/build-info.txt
        echo "Rocky Linux Version: $ROCKY_VERSION" >> /github/workspace/artifacts/build-info.txt
        echo "Debug Symbols Enabled: $ENABLE_DEBUG" >> /github/workspace/artifacts/build-info.txt
        echo "SWIG Version: $SWIG_VERSION" >> /github/workspace/artifacts/build-info.txt
        echo "PCRE2 Version: $(pcre2-config --version)" >> /github/workspace/artifacts/build-info.txt
        $ANDROID_NDK_HOME/ndk-build --version >> /github/workspace/artifacts/build-info.txt
        echo "make-standalone-toolchain.sh: $(ls -l $ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh)" >> /github/workspace/artifacts/build-info.txt
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: doubango-build-${{ github.event.inputs.android_abi }}-${{ github.event.inputs.ndk_version }}
        path: artifacts
        retention-days: 7
      
    - name: Generate build summary
      run: |
        echo "### Doubango 编译报告" >> $GITHUB_STEP_SUMMARY
        echo "**Android ABI**: $ANDROID_ABI" >> $GITHUB_STEP_SUMMARY
        echo "**NDK 版本**: $NDK_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Rocky Linux 版本**: $ROCKY_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**调试符号**: $ENABLE_DEBUG" >> $GITHUB_STEP_SUMMARY
        echo "**SWIG 版本**: $SWIG_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**PCRE2 版本**: $(pcre2-config --version)" >> $GITHUB_STEP_SUMMARY
        echo "**编译时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # 检查文件是否存在并记录状态
        TOOLCHAIN_SCRIPT="$ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh"
        if [ -f "$TOOLCHAIN_SCRIPT" ]; then
          echo "**make-standalone-toolchain.sh**: 存在" >> $GITHUB_STEP_SUMMARY
        else
          echo "**make-standalone-toolchain.sh**: ❌ 未找到" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "#### 包含的库文件" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        find artifacts -name "*.so" -o -name "*.a" | sort >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "#### 下载产物" >> $GITHUB_STEP_SUMMARY
        echo "工作流完成后，在 Artifacts 区域下载编译结果" >> $GITHUB_STEP_SUMMARY
